warning: an associated function with this name may be added to the standard library in the future
   --> $DIR/validated_pool.rs:206:44
    |
206 |                     self.import_notification_sinks.lock().retain_mut(|sink| {
    |                                                           ^^^^^^^^^^
    |
    = note: `#[warn(unstable_name_collisions)]` on by default
    = warning: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!
    = note: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>
    = help: call with fully qualified syntax `retain_mut(...)` to keep using the current method

warning: unused return value of `Box::<T>::pin` that must be used
   --> $DIR/lib.rs:501:4
    |
501 |             Box::pin(futures::future::ready(TransactionImport::None));
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(unused_must_use)]` on by default

warning: unused attribute `allow`
  --> $DIR/trait_tests.rs:70:2
   |
70 |     #[allow(deprecated)]
   |     ^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_attributes)]` on by default
note: the built-in attribute `allow` will be ignored, since it's applied to the macro invocation `assert_eq`
  --> $DIR/trait_tests.rs:71:2
   |
71 |     assert_eq!(blockchain.leaves().unwrap(), vec![a2.hash()]);
   |     ^^^^^^^^^

error[E0053]: method `test` has an incompatible type for trait
  --> $DIR/impl_incorrect_method_signature.rs:19:17
   |
13 |         fn test(data: u64);
   |                       --- type in trait
...
19 |         fn test(data: String) {}
   |                       ^^^^^^
   |                       |
   |                       expected `u64`, found struct `std::string::String`
   |                       help: change the parameter type to match the trait: `u64`
   |
   = note: expected fn pointer `fn(u64)`
              found fn pointer `fn(std::string::String)`

error[E0053]: method `Api_test_runtime_api_impl` has an incompatible type for trait
  --> $DIR/impl_incorrect_method_signature.rs:17:1
   |
11 | / sp_api::decl_runtime_apis! {
12 | |     pub trait Api {
13 | |         fn test(data: u64);
14 | |     }
15 | | }
   | |_- type in trait
16 |
17 |   sp_api::impl_runtime_apis! {
   |   -^^^^^^^^^^^^^^^^^^^^^^^^^
   |   |
   |  _expected `u64`, found struct `std::string::String`
   | |
18 | |     impl self::Api<Block> for Runtime {
19 | |         fn test(data: String) {}
20 | |     }
...  |
32 | |     }
33 | | }
   | |_- help: change the parameter type to match the trait: `std::option::Option<u64>`
   |
   = note: expected fn pointer `fn(&RuntimeApiImpl<__SR_API_BLOCK__, RuntimeApiImplCall>, &BlockId<__SR_API_BLOCK__>, ExecutionContext, std::option::Option<u64>, Vec<_>) -> Result<_, _>`
              found fn pointer `fn(&RuntimeApiImpl<__SR_API_BLOCK__, RuntimeApiImplCall>, &BlockId<__SR_API_BLOCK__>, ExecutionContext, std::option::Option<std::string::String>, Vec<_>) -> Result<_, _>`
   = note: this error originates in the macro `sp_api::impl_runtime_apis` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
  --> $DIR/impl_incorrect_method_signature.rs:17:1
   |
17 | / sp_api::impl_runtime_apis! {
18 | |     impl self::Api<Block> for Runtime {
19 | |         fn test(data: String) {}
20 | |     }
...  |
32 | |     }
33 | | }
   | |_^ expected `u64`, found struct `std::string::String`
   |
   = note: this error originates in the macro `sp_api::impl_runtime_apis` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
  --> $DIR/impl_incorrect_method_signature.rs:19:11
   |
19 |         fn test(data: String) {}
   |                 ^^^^ expected `u64`, found struct `std::string::String`
